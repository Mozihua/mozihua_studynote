1. Setup

from __future__ import print_function

import sys
import os
import numpy as np
import nibabel as nib
import nilearn as nl

	# Image settings
import nilearn.plotting
import matplotlib as mpl
import pylab as plt
import seaborn as sns
sns.set_style('white')
%matplotlib inline
mpl.rcParams['font.family'] = 'DejaVu Sans'

	# Assumed working directory
os.chdir("/home/jovyan/work/")

out_dir = 'data/ds000114/derivatives/nibabel_nilearn_tutorial'
if not os.path.isdir(out_dir):
    os.mkdir(out_dir)
	
2. Nibabel£ºa low-level Python library for reading and writing common neuroimaging formats

2.1
t1 = nib.load('data/ds000114/sub-01/anat/sub-01_T1w.nii.gz')	#The array proxy allows us to create the
									image object without immediately loading all the array data from disk.
									

t1.dataobj	#dataobj is the object pointing to the image array data
t1.get_data()
t1.get_fdata()	#By default, when you call get_fdata() the first time on a proxy image, the image object
				keeps a cached copy of the loaded array. The next time you call img.get_fdata(), the image returns the array from cache rather than loading it from disk again.
t1.affine
t1.header

fig = plt.imshow(data[:,:,data.shape[2] // 2].T, cmap='Greys_r')
fig.axes.set_xticks([])
_ = fig.axes.set_yticks([])

t1.orthoview()

img.get_data_dtype()	#shows the type of the data on disk
img.get_data().dtype	#shows the type of the data that you're working with

x, y, z, _ = np.linalg.pinv(affine).dot(np.array([0, 0, 0, 1])).astype(int)

nib.aff2axcodes(affine)		#encodes the axis orientation

nib.affines.voxel_sizes(affine)		#voxel sizes

header = t1.header
print(header)
header.structarr['descrip']

for method in ('get_zooms', 'get_xyzt_units', 'get_qform', 'get_sform'):
    print("header.{}()".format(method))
    print(getattr(header, method)())
    print
	
!nib-ls -H descrip data/ds000114/sub-01/anat/sub-01_T1w.nii.gz
	#data/ds000114/sub-01/anat/sub-01_T1w.nii.gz float32 [256, 156, 256] 1.00x1.30x1.00   b'FSL5.0' sform

2.2 Creating and saving images

rescaled = ((data - data.min()) * 255. / (data.max() - data.min())).astype(np.uint8)

rescaled_img = nib.Nifti1Image(rescaled, affine=affine, header=header)
nib.save(rescaled_img, 'rescaled2.nii.gz')

rescaled_img = nib.Nifti1Pair(rescaled, np.eye(4))
nib.save(pair_img, 'my_pair_image.img')

rescaled_img = nib.AnalyzeImage(rescaled, np.eye(4))
nib.save(pair_img, 'my_pair_image.img')

print((rescaled_img.get_data().dtype, rescaled_img.get_data_dtype()))
	#(dtype('uint8'), dtype('<f4'))
	#Our data array has the correct type, but the on-disk format is determined by the header, so saving now will not do what we want.

rescaled_img.set_data_dtype(np.uint8)	#set the data type in the header

rescaled_img.to_filename(os.path.join(out_dir, 'rescaled2.nii.gz'))
nib.save(rescaled_img, os.path.join(out_dir, 'rescaled2.nii.gz'))

test = nib.load(os.path.join(out_dir, 'rescaled2.nii.gz'))

test.set_filename('another_image.nii')

test.get_filename()
test.file_map['image'].filename


print((test.get_data().dtype, test.get_data_dtype()))

	# Check that our data is what we think it is
assert np.array_equal(test.get_data(), rescaled)
	#(dtype('uint8'), dtype('uint8'))

2.3 Functional time series

!nib-ls data/ds000114/sub-01/func/sub-01_task-linebisection_bold.nii.gz

epi = nib.load('data/ds000114/sub-01/func/sub-01_task-linebisection_bold.nii.gz')

epi.orthoview()

mean_data = epi.get_data().mean(axis=3)

mean_epi = nib.Nifti1Image(mean_data, affine=epi.affine, header=epi.header)
mean_epi.orthoview()

mean_epi.to_filename(os.path.join(out_dir, 'mean_epi.nii.gz'))

3. Nilearn£ºNilearn is a library which makes visualizing neuroimages and exposing them to machine learning algorithms straightforward.we can use nilearn to verify alignment, for example when testing a new algorithm.

3.1
img = nl.image.mean_img('data/ds000114/sub-01/func/sub-01_task-linebisection_bold.nii.gz')	#we can
													recreate the mean EPI image we just made in one line:
np.array_equal(mean_epi.get_data(), img.get_data())
	#True

3.2 Plotting images
nl.plotting.plot_epi(mean_epi, cut_coords=(0, 0, 0))	#shows functional images in a high-contrast color
														scheme
nl.plotting.plot_anat(t1, dim=-1, cut_coords=(0, 0, 0))	#plot anatomical images

nl.plotting.plot_roi('data/ds000114/derivatives/freesurfer/sub-01/mri/aseg.mgz', t1,	
                     dim=-1, cut_coords=(0, 0, 0))		#show the FreeSurfer aseg segmentation over the
														T1 image
														
array.dtype
array.astype(np.float64)








	

	


